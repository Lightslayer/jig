# vim: set filetype=python :
import sys
import logging
import SimpleHTTPServer
import SocketServer
import posixpath
import urllib
import os
from os import path, chdir

from sphinx.cmdline import main as sphinx_main
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

here = os.path.dirname(__file__)
docs = os.path.realpath(os.path.join(here, '..', 'docs'))
doctrees = os.path.join(docs, 'build', 'doctrees')
source = os.path.join(docs, 'source')
html = os.path.join(docs, 'build', 'html')

logging.basicConfig(
    level=logging.INFO,
    format=' - %(message)s')

logger = logging.getLogger(__name__)

PORT = 8000

SPHINX_ARGV = [
    '-b', 'html',
    '-d', doctrees,
    source,
    html]


class BuildDocsHandler(FileSystemEventHandler):

    """
    On any change, rebuild the docs.

    """
    def dispatch(self, event):
        build_docs()


class DocsHTTPRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):

    """
    Request handler with an explicit root instead of using os.getcwd().

    """
    _root = html

    def translate_path(self, path):
        path = path.split('?',1)[0]
        path = path.split('#',1)[0]
        path = posixpath.normpath(urllib.unquote(path))
        words = path.split('/')
        words = filter(None, words)

        # Use our root here instead of the current working directory
        path = self._root

        for word in words:
            drive, word = os.path.splitdrive(word)
            head, word = os.path.split(word)
            if word in (os.curdir, os.pardir): continue
            path = os.path.join(path, word)
        return path


def build_docs():
    """
    Use Sphinx to build the reStructuredText into HTML.
    """
    sphinx_main(['sphinx-build'] + SPHINX_ARGV)


def main():
    """
    Build the docs and serve them with an HTTP server.
    """
    build_docs()

    # Watch the source directory for changes, build docs again if detected
    observer = Observer()
    observer.schedule(
        BuildDocsHandler(),
        path=source, recursive=True)
    observer.start()

    server = SocketServer.TCPServer(
        ('', PORT),
        DocsHTTPRequestHandler)

    try:
        logger.info('Serving on localhost:{}'.format(PORT))
        server.serve_forever()
    except KeyboardInterrupt:
        observer.stop()
    finally:
        observer.join()

    sys.stdout.write('')
    sys.exit(0)


if __name__ == '__main__':
    main()
